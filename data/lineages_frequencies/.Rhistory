library(ggplot2)
library(tidyr)
library(dplyr)
library(patchwork)
library(gridExtra)
library(stringr)
library(reshape2)
library(gridExtra)
library(zoo)
#library(grid)
library(DescTools)
path<-getSourceEditorContext()$path
setwd("../../data/lineages_frequencies")
setwd("../../data/lineages_frequencies")
#Rule to substitute AA
aacodefile<-read.csv("../genetic_code.txt", header = F, sep =" ")
aacode<-unique(aacodefile[,c(2,3)])
###Function to parse vcf and find recurrent events in clusters
parseVCF<-function(filename)
{
#filename<-"Delta.clusters.snpeff.corrected.vcf"
AnnotatedVCF<-read.csv(filename, header =F, skip=8, sep='\t')
AnnotatedVCFINFOA<-separate(data = AnnotatedVCF, col = V8,
into = c("ClusterNode","INFOelse"),
sep = ',')
AnnotatedVCFINFOB<-separate(data = AnnotatedVCFINFOA, col = INFOelse,
into = c("Node","INFOelse"),
sep = ';')
AnnotatedVCFINFOC<-separate(data = AnnotatedVCFINFOB, col = INFOelse,
into = c("MutType","A1"),
sep ='[(]')
AnnotatedVCFINFOD<-separate(data = AnnotatedVCFINFOC, col = A1,
into = c("A1","A2","Codon","Prot_long","A3","gene","Type","A4","A5",
"A6","A7"),
sep ='[|]')
AnnotatedVCFINFOE<-separate(data = AnnotatedVCFINFOD, col = Prot_long,
into = c("ProtChange","A"),
sep ='[/]')
#AnnotatedVCFINFO<-AnnotatedVCFINFOE[,c(1:10,13,14,17,18)]
AnnotatedVCFINFOE$ClusterNode <- gsub('Cluster=', '', AnnotatedVCFINFOE$ClusterNode)
AnnotatedVCFINFOE$Node <- gsub('Node=', '', AnnotatedVCFINFOE$Node)
AnnotatedVCFINFOE$ProtChangeLong <- gsub('p.', '', AnnotatedVCFINFOE$ProtChange, fixed=T)
#generating short values
REFAA<-substring(AnnotatedVCFINFOE$ProtChangeLong,1,3)
REFAAshort<-as.character(aacode$V2[match(REFAA, aacode$V3)])
ALTAA<-substring(AnnotatedVCFINFOE$ProtChangeLong,nchar(AnnotatedVCFINFOE$ProtChangeLong)-2,nchar(AnnotatedVCFINFOE$ProtChangeLong))
ALTAAshort<-as.character(aacode$V2[match(ALTAA, aacode$V3)])
POS<-substring(AnnotatedVCFINFOE$ProtChangeLong,4,nchar(AnnotatedVCFINFOE$ProtChangeLong)-3)
#merge
AnnotatedVCFINFOE$ProtChange<-paste(AnnotatedVCFINFOE$gene,":",REFAAshort,POS,ALTAAshort,sep="")
AnnotatedVCFINFOE$MutType <- gsub('EFF=', '', AnnotatedVCFINFOE$MutType)
INFOLong<-AnnotatedVCFINFOE[,c("V2","V4","V5","MutType","ProtChangeLong","ProtChange", "gene", "Type", "A2")]
INFOShort<-INFOLong %>%
group_by(V2,V4,V5,MutType,ProtChangeLong,ProtChange,gene,Type) %>% summarise(events=length(A2))
INFOShortMissense<-subset(INFOShort,(INFOShort$MutType != "synonymous_variant" &
INFOShort$Type == "protein_coding"))
return(INFOShortMissense)
}
##############
#Get tables to analyze for Alpha and Delta clusters
DeltaVCF<-parseVCF("Delta.clusters.snpeff.corrected.vcf")
AlphaVCF<-parseVCF("Alpha.clusters.snpeff.corrected.vcf")
##############
#Read data on mutations counts from alignment (only for clusters)
getVariantsFromAli<-function(filename)
{
FromAli<-read.csv(filename, header = F, sep = " ")
#aggregate data
SampleIDsAggr<-aggregate(V4 ~ V1+V2+V3, data = FromAli, paste, collapse = ",")
LineagesAggr <- FromAli%>%
group_by(V1,V2,V3) %>%
summarise(lineage = paste(unique(V5), collapse = ","))
FromAliCounts <- FromAli%>%
group_by(V1,V2,V3) %>%
summarise(count=length(V4))
#merge aggregated
df_list <- list(SampleIDsAggr, FromAliCounts, LineagesAggr)
FromAliAggregated<-Reduce(function(x, y) merge(x, y, all=TRUE), df_list)
return(FromAliAggregated)
}
DeltaFromAliAggregated<-getVariantsFromAli("Delta.variants_from_ali.strict.only_clusters.tsv")
AlphaFromAliAggregated<-getVariantsFromAli("Alpha.variants_from_ali.strict.only_clusters.tsv")
#I read data about singletons because I will require it later on
DeltaFromAliSingletons<-getVariantsFromAli("Delta.variants_from_ali.strict.only_singletons.tsv")
######################
#merge data from alignment with VCF data
DeltaVariantsInfo<-merge(DeltaVCF, DeltaFromAliAggregated, by.x = c("V2","V5"), by.y = c("V1","V3"))
#The final number is lower because all non-missense (3) and reversions are removed
AlphaVariantsInfo<-merge(AlphaVCF, AlphaFromAliAggregated, by.x = c("V2","V5"), by.y = c("V1","V3"))
#In case of Alpha lineage is not provided for NY samples that is why I substitute it with B.1.1.7 for all
AlphaVariantsInfo$lineage<-rep("B.1.1.7", length(AlphaVariantsInfo$V2))
DeltaVariantsInfo$mutationup<-str_replace_all(DeltaVariantsInfo$ProtChange,"ORF1ab","ORF1a")
DeltaVariantsInfo$mutation<-tolower(DeltaVariantsInfo$mutationup)
AlphaVariantsInfo$mutationup<-str_replace_all(AlphaVariantsInfo$ProtChange,"ORF1ab","ORF1a")
AlphaVariantsInfo$mutation<-tolower(AlphaVariantsInfo$mutationup)
########################################
#Going to outbreak.info to select the varaints that can be potentially of interest
#Select lineages of interest
#DeltaLineagesToCheck<-c("AY.3", "AY.25", "AY.44", "AY.75","AY.103","B.1.617.2")
AlphaLineagesToCheck<-c("B.1.1.7")
View(DeltaVariantsInfo)
MutsSpike<-c("S:L18F","S:T29I","S:H69Y","S:G75V","S:Y145D","S:G476S","S:N501Y","S:P681H")
DeltaLineagesToCheck<-c("AY.3", "AY.25", "AY.44", "AY.75", "AY.103","B.1.617.2")
DeltaVCF$mutationup<-str_replace_all(DeltaVCF$V13,"ORF1ab","ORF1a")
View(DeltaVariantsInfo)
DeltaMutsToCheck<-MutsSpike
DeltaMutsToChecklow<-tolower(DeltaMutsToCheck)
library(outbreakinfo)
devtools::install_github("outbreak-info/R-outbreak-info")
install.packages("devtools")
devtools::install_github("outbreak-info/R-outbreak-info")
devtools::install_github("outbreak-info/R-outbreak-info")
library(outbreakinfo)
authenticateUser()
library(outbreakinfo)
authenticateUser()
DeltaVariantsInfo$mutationup
